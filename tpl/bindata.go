// Code generated by go-bindata.
// sources:
// tpl/grpc/grpc.client.gogo
// tpl/grpc/grpc.server.gogo
// tpl/http/README.md
// tpl/http/http.client.gogo
// tpl/http/http.server.gogo
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _grpcGrpcClientGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\x51\x6b\xdb\x30\x10\xc7\x9f\xa3\x4f\x71\x13\xed\xb0\x87\xa3\xe5\xb1\x04\xfc\x30\x36\x18\x1d\xa3\x0b\x74\xb0\x87\xd2\x07\xc7\x3e\x7b\xda\x9c\x93\x90\x95\x95\x21\xf4\xdd\xc7\x49\x6e\xb7\xae\x89\x5f\x82\xee\xfc\xbf\xf3\xef\xee\xaf\x38\x84\x0e\x7b\x4d\x08\x72\x70\xb6\x55\xed\xa8\x91\xbc\x84\x75\x8c\x21\xac\xe1\xc2\xec\x7f\xc0\xb6\x06\xc5\x09\x61\x9b\xf6\x67\x33\x20\x84\xc0\x79\xb5\xcb\xa1\xba\x69\x0e\x18\xa3\x10\xfa\x60\x8d\xf3\x50\x08\x00\x00\xd9\x1f\xbc\xcc\xa7\xc9\x3b\x4d\xc3\x94\xa3\xf4\x63\xf7\x20\xe7\x26\xd7\xa9\x68\xb7\x8f\x71\x56\x0f\xc6\x0c\x23\xaa\xc1\x8c\x0d\x0d\xca\xb8\xe1\x2d\x83\x49\x51\x0a\xc1\x44\xae\xa1\x01\xe1\x62\x42\xf7\x4b\xb7\xc8\x6c\xa9\xcd\x6d\x8e\xa7\x18\x45\x7f\xa4\x96\x11\x67\xc9\x8c\xf7\xd1\xd9\x96\x4f\x45\x09\x99\x07\x42\x7a\x9f\x43\x7f\x74\x34\xe7\x26\xf5\xc9\x68\x2a\xee\xee\x73\x18\x1e\xb3\x5f\xcd\x67\xf3\x80\xae\x90\x27\x27\x97\x65\x05\xa7\x94\xcf\x01\x64\x19\x2b\x90\x6b\x59\x8a\x25\xc4\x9d\x71\xbe\x28\x41\x93\x7f\xce\x77\xb5\xb9\xda\x2c\x16\xbe\xeb\x3a\x77\x66\xb6\xfe\xe0\xd5\xad\x75\x9a\x7c\x5f\xc8\xcb\x69\x7b\xd9\xc9\x6a\x69\x41\x67\x1e\x66\x34\xc6\xf7\xbf\x2d\x9e\xd6\xbc\x4f\xd7\x87\x29\x8e\xad\x0f\xb3\xd7\xea\x85\x34\xcb\x44\x14\x79\xa0\x1b\x7c\x58\xe8\x56\x34\x5d\xe7\xe6\xc1\x2a\x30\xd6\x4f\xa0\x94\x4a\xb7\xf5\x83\x6e\xc6\x2f\xd6\x6b\x43\x25\x14\x6f\x16\x7a\x54\x80\xce\x19\x57\x3e\x2e\xc6\x58\xcf\x57\xe7\xee\xfe\xbf\x36\x21\xa6\xe7\xba\x87\x11\xa9\xe0\x77\x95\x50\xd7\xb0\x99\xeb\x9e\x6a\x6b\x68\xac\x45\xea\x0a\x8e\x2a\x48\x5d\xbe\x69\xff\xfd\x9a\x26\x6c\x8f\x0e\x79\x4f\x2c\x8e\xe2\x5c\x09\xf7\x56\x4a\x65\x59\x6b\x88\x12\x22\x43\x3d\x21\xa5\xc1\xab\x54\x9d\x94\x2b\xdd\x27\xcd\xab\x1a\x48\x8f\x10\xc4\x6a\x35\x3b\x4c\x7a\x4c\xe5\x62\x15\xff\x35\xfe\xf5\xc2\x46\xfe\x0e\x74\xc6\x9d\x2d\x3b\x77\xca\x99\xd9\x15\x66\x2e\xab\x3c\x65\xc5\x04\x22\xa6\x3f\x28\x52\x17\xf9\x84\xd4\xf1\x47\xe3\x4f\x00\x00\x00\xff\xff\xc5\xe8\x01\x3c\x60\x04\x00\x00")

func grpcGrpcClientGogoBytes() ([]byte, error) {
	return bindataRead(
		_grpcGrpcClientGogo,
		"grpc/grpc.client.gogo",
	)
}

func grpcGrpcClientGogo() (*asset, error) {
	bytes, err := grpcGrpcClientGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grpc/grpc.client.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _grpcGrpcServerGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x4f\xdc\x30\x10\x3d\xc7\xbf\x62\x6a\xa1\xca\x41\x8b\xb9\x23\x71\xea\xa1\xaa\xd4\x52\x04\xfd\x03\x59\x67\x30\x6e\x13\xdb\xd8\xde\x05\x64\xf9\xbf\x57\x9e\x38\x74\x81\x6a\xd5\x5e\x12\x65\x3e\xde\xbc\xf7\x66\x92\xf3\x88\x77\xc6\x22\x70\x1d\xbc\x92\x11\xc3\x1e\x03\x87\xb3\x52\x72\x3e\x83\x13\xb7\xfd\x09\x17\x97\x20\x6b\x80\xf9\x41\xfd\x1a\x34\x42\xce\x35\x2e\xaf\x97\x4f\x79\x35\xcc\x58\x0a\x63\x66\xf6\x2e\x24\x10\x0c\x00\x80\x2b\x67\x13\x3e\x25\xce\x3a\x3e\x39\x5d\x5f\x16\x13\xa7\x1c\x3d\xfc\x16\x78\x03\xfa\x42\x8d\xd7\xdb\x52\x96\x3c\xd7\xce\xe9\x09\xa5\x76\xd3\x60\xb5\x74\x41\x9f\x57\x72\x6b\xd2\xa4\xfb\xdd\x56\x2a\x37\x9f\x3f\x9d\xcd\x6e\x3c\xc7\x10\x5c\x88\x9c\xf5\x8c\x55\xce\x61\xb0\x1a\xe1\xa4\x2a\x31\x0a\x2b\x7b\x1a\x72\xbb\x7c\xc7\x52\x58\x7a\xf6\x24\xa2\x95\x34\x01\x9f\x83\x57\xad\x08\x62\x0a\x3b\x95\x32\x0d\x1c\xc6\x31\xd4\x80\xb1\x9a\x75\x3a\x86\x3d\x9c\x92\x55\xb7\x64\x15\x2b\x8c\xdd\xed\xac\x82\x2b\x7c\x3c\x06\x29\x0e\x60\x36\xe0\x7c\x8a\x20\xa5\x3c\x00\xfa\xee\x93\x71\xb6\x87\xd3\xa3\xc4\x32\xeb\x0e\x84\x7d\x3c\x56\x9b\xeb\xc4\x0b\xa2\x5f\x48\x88\x5e\x96\x5b\x1b\x69\xee\x15\x3e\x2e\xa3\x45\xa5\x23\xa5\xec\xa9\x6c\x05\x24\xa9\x97\x6b\x17\xa5\x02\xa6\x5d\xb0\x6b\xc5\x8b\x74\x11\xf7\xea\x38\xef\x1e\x68\x92\x50\xe9\x09\xda\x61\xc8\x4f\xcb\xbb\x07\xda\x1f\xe4\x76\x15\xf2\x06\xb5\x89\x09\xc3\x3b\xbc\x46\x36\xee\x15\x71\xdb\x40\xdc\xab\x85\xf2\x64\x37\x15\xa5\x2a\xb3\x98\xe4\xd7\xda\x6f\x05\x4f\xca\x73\xaa\x92\xd5\x84\x9e\x75\xe6\x8e\xca\x3e\x5c\x82\x35\x53\xf5\xb2\x6b\x8a\x30\x04\xd6\x15\xd6\x4d\x4e\xcb\xeb\x60\x6c\x9a\xac\xe0\xab\xd1\xe2\x1d\x93\x7e\xb1\xc0\x6a\x18\x12\xbc\x1e\xb1\x5a\xd4\x48\x2e\xcb\x15\x93\xed\xff\xcf\xad\xe4\xbc\xe8\x69\xdb\x2f\x40\x14\xaa\x28\x39\xb7\x13\x9f\x31\xdd\xbb\x91\x2e\x7c\xc5\xfa\x46\xa1\x48\xbf\xeb\x3f\x4f\xcb\xb9\x41\xb5\xe4\xdf\xd6\xb4\x81\x80\x0f\x70\xea\xb7\xf2\x4f\xf5\x0d\x3e\xec\x30\xa6\x1f\xcf\x9e\x3c\x11\x6f\xb3\xd5\x89\xb8\x64\x37\xcb\x96\x49\x52\xb3\xc8\x9a\xa9\x45\x63\x3d\x45\xc1\xdf\xd2\x80\x9d\x35\xb3\x9f\x70\x46\x9b\x70\xe4\x55\x7b\xce\x68\x47\x12\x47\xbf\x3a\xda\xb1\xbc\x0a\xfe\x0e\x00\x00\xff\xff\x05\x29\x9e\x26\xce\x04\x00\x00")

func grpcGrpcServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_grpcGrpcServerGogo,
		"grpc/grpc.server.gogo",
	)
}

func grpcGrpcServerGogo() (*asset, error) {
	bytes, err := grpcGrpcServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grpc/grpc.server.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x28\x29\x29\x50\x48\x4f\xcd\x4b\x2d\x4a\x2c\xc9\xcc\xcf\xe3\xb2\xb5\xb5\xe5\xe2\x42\x16\x4c\x55\x48\xce\x4f\x49\x55\x00\x04\x00\x00\xff\xff\x8b\x5f\x48\x80\x28\x00\x00\x00")

func httpReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_httpReadmeMd,
		"http/README.md",
	)
}

func httpReadmeMd() (*asset, error) {
	bytes, err := httpReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpHttpClientGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xdb\x30\x0c\x3d\x5b\xbf\x82\x33\x82\xc1\x2e\x5c\x01\xbb\x76\xc8\x65\xc5\x80\x6d\x58\x3f\xd0\x76\xbb\x0c\x3b\x78\x0a\x9b\x7a\x49\x25\x55\x96\xd3\x16\x82\xfe\xfb\x40\x49\x6e\x12\xc7\x69\x33\x1d\x5a\x88\x7a\x24\x1f\xc9\x47\xc7\xb9\x19\xde\x36\x12\x21\xbf\xb3\x56\x73\xb1\x6c\x50\xda\x1c\x8e\xbd\x67\xce\x1d\xc3\x44\xfd\xf9\x0b\x27\x53\xe0\x2f\x16\x53\xcb\x39\xc2\xa4\x45\xb3\x6a\x04\xd2\x1b\x61\xf8\x75\xbc\xb7\xde\x33\xfb\xac\x11\xbe\xdc\xdc\x5c\x3a\xd7\xc3\xf8\x79\x7d\x8f\xde\x9f\x86\xe8\xd0\x5a\xd3\x09\x0b\x8e\x65\x47\x31\x1f\x27\x74\x7c\x64\x9e\xb1\xdb\x4e\x0a\x38\xc7\xc7\x57\x62\x14\x4a\xdb\x16\x38\xe7\x3b\x01\x2e\xb4\x2d\x61\x5f\x66\xc7\xb2\x79\xf0\x3c\x99\xc2\xaf\xdf\x63\xbe\xce\xf7\x90\x29\xd4\x5a\xa3\x9c\x15\xe1\x5a\x41\x42\xff\x44\xd3\x36\x4a\x16\xf9\xea\x43\x5e\x96\x6f\x80\x2f\x6b\xb1\xa8\xe7\x48\x1c\x8a\xdc\xb9\xd0\xa9\x64\x4b\xc4\xde\x8e\x91\x3a\xfb\x12\x63\xbb\x30\xf2\x07\x00\xd8\x1c\x8d\xd2\x36\xcc\xa5\x47\x5e\x68\xdb\x28\xd9\x86\x11\x42\x3a\x84\x6f\x6e\x01\x1f\x22\x3e\x44\x83\x9c\xda\x4a\x50\x9e\x5c\xcb\x7c\xcb\x69\x90\x68\x51\xc1\x64\x15\x33\x51\x88\x53\x25\x5b\x5b\x4b\xcb\xcf\x6a\xbd\xe3\x36\xc8\xb9\x80\x7c\x15\x1b\x99\x8f\x00\x0f\x1b\x80\x73\x93\x15\xbf\x56\x9d\x11\x1b\x7d\x18\xe6\x43\x39\x1b\x2d\x61\x68\x1f\xda\xd2\xdd\xef\x95\x03\xfd\xe5\x9c\x97\x2c\x33\x68\x3b\x23\xe1\xfd\x2b\x72\x75\x2c\xcb\xd6\x32\x3b\xe9\x4b\x49\x1a\x4f\x92\x9e\xf7\x21\x2b\x96\x79\xda\x03\xe7\x52\xa3\xef\xd1\xde\xa9\xd9\xd6\x4c\xcf\x82\x29\xce\x34\xec\x4b\x21\xe0\xe8\x15\x06\x61\x27\x62\x9c\x64\x2f\x84\x7d\x02\xa1\xa4\xc5\xa7\x30\x3b\xfa\x5f\x41\x23\xe1\x68\x8d\xbc\xc2\x87\x0e\x5b\x7b\xf3\xac\xd1\xfb\x58\x33\x2d\xdd\xdc\x68\xc1\x4f\xeb\xe5\x32\x2a\xab\x84\x62\xcb\x87\xda\xd1\xf6\x3e\x68\x8c\x32\x25\x6d\x9e\xc1\x87\x70\xa5\x3a\x04\x3f\xab\x17\x98\xc2\x17\x2c\xcb\xf2\x21\xbd\xbc\x62\x23\x92\x8b\xfa\x0c\x9d\x48\xe8\x31\x71\x0f\xc4\x16\x9d\x86\x12\xa7\xef\xdd\x88\xbe\xf7\x6a\x3c\x45\x79\x53\xe5\xbb\x4a\x8f\x4c\xc7\x84\x4e\x87\x78\x24\x3d\xc4\xa1\xee\x28\xbb\xda\x9b\x63\x4c\xdd\xe3\x1c\x3a\xd3\x1c\x40\xe0\xc7\xd5\xf7\x62\xeb\xfa\x75\x77\xcd\xfe\x9f\xcd\xc6\xdb\x98\x2b\xc0\xa1\xdb\x49\xdb\x98\x6d\xf0\x0b\xaa\x95\x76\x93\xf2\xe5\xa7\x6f\xd7\x17\xe7\x45\x23\x89\x68\x56\xb2\x8c\x5a\x60\x0c\xbc\x9b\x82\x6c\x96\x24\xc3\x7e\x5f\x65\xb3\x0c\x72\xa4\x65\xcb\x54\x17\x3e\x99\x12\x1f\x8b\x3d\x4a\x5e\x87\x0a\xf2\xfd\xfc\x84\xa2\xb3\x48\x4b\x54\x41\x50\xf6\x0b\x81\x2b\x6c\xb5\x92\x2d\x16\xaa\xb3\x65\xf9\xf1\x90\xf4\xc9\xa6\x3a\x5b\xd1\x03\xa3\x9f\xda\xbe\x07\xeb\xda\xd7\x36\x3a\xff\x02\x00\x00\xff\xff\x15\x47\x32\xb5\xba\x07\x00\x00")

func httpHttpClientGogoBytes() ([]byte, error) {
	return bindataRead(
		_httpHttpClientGogo,
		"http/http.client.gogo",
	)
}

func httpHttpClientGogo() (*asset, error) {
	bytes, err := httpHttpClientGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/http.client.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpHttpServerGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdd\x6e\xdb\x3a\x0c\xbe\x96\x9e\x82\xc7\x28\x0a\xbb\x70\xfd\x00\x06\x7a\x73\xce\xb9\xe8\x2e\xba\x16\x4d\xb7\x5d\x0c\x43\xe1\x39\x4c\xab\x25\x91\x1d\x4a\x71\x3b\x08\x7a\xf7\x41\x3f\x49\x1c\xc7\xde\x3a\xa0\xbe\x09\x42\x7e\xe4\x47\x91\x9f\x44\x63\xe6\xb8\x10\x12\x21\x79\xd6\xba\x2d\x14\x52\x87\x94\xc0\xa5\xb5\xdc\x98\x4b\x38\x6b\xbe\xff\x80\xf2\x0a\x8a\xbd\x85\x2a\xf9\x84\x70\xe6\x80\xa2\x46\xe7\x73\x98\x62\x16\xfe\x2b\x6b\xf9\x62\x2b\x6b\xb8\xc7\x27\xa1\x34\x92\x31\x3b\x68\xf1\xb1\x5a\xa3\xb5\xd7\x0f\x0f\x77\x33\xcf\x92\x2a\xb8\x08\x7c\xc5\xc1\x98\x83\xa2\x0e\x4e\xa2\x82\x33\x03\x24\x6a\x08\x0c\x67\x84\x7a\x4b\x12\x54\xb1\x23\x8a\x05\xa4\xe7\x8f\x27\xc1\x8f\x2e\xfd\x63\xb4\xfd\x8f\xaa\xf6\x24\x19\xb7\x9c\x77\x15\xc1\x1b\x02\xe0\x0a\x62\xa5\xb3\x83\x91\x44\xab\x45\x23\x0d\x67\x77\x55\xbd\xac\x9e\xd0\x05\x97\x00\x89\x31\xbe\x25\xd1\x1a\x73\x26\x39\x67\x31\xb8\x87\x3b\xe6\x75\x98\x0f\xeb\x76\x85\x6b\x94\x2e\x75\x09\xe9\xc5\x54\x2b\x52\x29\x56\x59\xce\x01\x00\x8c\xd9\x0d\xa5\x69\xb5\x9f\xc8\x2e\xe2\xd6\x57\xa8\xfc\xf0\x20\x7e\x6e\x88\x62\x01\xb8\x09\x78\x9f\x15\x92\xb4\x09\xd0\x22\x86\x66\xc9\x51\x90\xfb\x42\xb2\x12\xce\x77\xd0\x78\x9c\xdb\xd8\x06\x18\x7c\x3d\xb5\x2c\x73\x38\xeb\x42\x65\x8e\xf2\xbf\x46\x2a\x5d\x49\x5d\xdc\x54\xed\x80\x64\xa4\xca\x25\x24\x1d\x92\x12\x8d\x4c\x26\xc0\x9f\x83\xbb\xf4\x2d\xed\x8a\x59\xb3\xa5\x3a\xb4\x73\x3c\x35\xca\xf9\xc9\xe9\xa6\x3d\x36\x3f\xea\x5d\x1f\x12\xff\x5b\xcb\xd9\x0d\xea\xe7\x66\xae\x4a\xf8\xfa\x2d\x4a\x25\x58\x8e\x94\x72\xc8\x13\x1b\xb3\xf6\x98\xa3\x99\xc5\x44\x9e\x83\x31\xc3\x19\x8b\xb9\x83\x6c\xdc\x11\x43\x54\x4f\x34\x8c\x5d\x57\x72\xbe\x42\x2a\x5d\xf6\x11\x41\x0f\x83\x82\xc2\x63\xd0\x71\x9b\xf6\xb5\x85\x31\xfb\xda\x62\xec\x98\x9c\x46\x06\x16\x02\x87\xc2\x72\xef\xcb\x88\xaa\x60\x4c\x59\xd7\x5a\xb7\x53\xb2\x82\x29\x69\x45\xda\xbe\xb8\x46\xd9\x46\x2a\x5e\x42\x12\x8e\x38\xa5\x30\xf7\x85\x29\xbc\x51\x64\x63\x6a\xf9\x73\x11\x5b\x12\xbf\xab\xe0\x13\x89\x77\xa4\x3f\x88\x77\xe8\xb1\xf9\x54\xce\xd1\xb1\x8f\x91\xf4\x6e\x06\x3b\x4d\x37\xbc\x50\x0e\x66\x73\xf7\x20\xbf\xf5\x66\xf8\x25\xf3\xb7\x42\x4f\xdd\x6e\x11\x52\x23\x2d\xaa\x1a\x8d\xcd\xa1\xd6\xaf\x50\x37\x52\xe3\xab\x7f\x95\xdc\x6f\x0e\x2f\x04\x7e\x19\xde\xa3\x6a\x1b\xa9\xf0\x0b\x09\xed\x36\x13\xe1\x06\x2e\xa2\x67\xb3\x45\xa5\x33\xb7\x89\x84\xbf\x22\x12\x5f\xd2\x03\x77\xf4\x3f\xfc\x6c\xd1\xda\x8c\x33\x24\x72\xa0\xf8\x30\xdc\xfd\x1b\xfd\x29\xe1\x26\x07\x21\x33\xce\x9c\x06\x88\xe0\x9f\x2b\x90\x62\xe5\xd2\xb2\x1e\x38\x94\x91\xbe\x50\xee\xbc\xb9\x43\x66\x9c\xc5\x1d\xc8\x99\xe5\xac\xd9\x6a\x6f\xf6\x2c\xd4\x15\xe9\xd4\xda\x28\x86\x0d\x4a\xf7\x3c\xf1\xfc\xa1\xa8\x5a\xbf\x66\xef\x53\xda\x38\x78\x57\xb0\xdb\xc2\x87\x67\x77\x2f\x07\xe8\x19\xf9\xaf\x00\x00\x00\xff\xff\x10\xee\x8f\x38\xa4\x08\x00\x00")

func httpHttpServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_httpHttpServerGogo,
		"http/http.server.gogo",
	)
}

func httpHttpServerGogo() (*asset, error) {
	bytes, err := httpHttpServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/http.server.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"grpc/grpc.client.gogo": grpcGrpcClientGogo,
	"grpc/grpc.server.gogo": grpcGrpcServerGogo,
	"http/README.md": httpReadmeMd,
	"http/http.client.gogo": httpHttpClientGogo,
	"http/http.server.gogo": httpHttpServerGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"grpc": &bintree{nil, map[string]*bintree{
		"grpc.client.gogo": &bintree{grpcGrpcClientGogo, map[string]*bintree{}},
		"grpc.server.gogo": &bintree{grpcGrpcServerGogo, map[string]*bintree{}},
	}},
	"http": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{httpReadmeMd, map[string]*bintree{}},
		"http.client.gogo": &bintree{httpHttpClientGogo, map[string]*bintree{}},
		"http.server.gogo": &bintree{httpHttpServerGogo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

