// Code generated by go-bindata.
// sources:
// tpl/http/README.md
// tpl/http/grpc.client.gogo
// tpl/http/http.client.gogo
// tpl/http/http.gogo
// tpl/http/http.server.gogo
// tpl/impl/impl.gogo
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _httpReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x28\x29\x29\x50\x48\x4f\xcd\x4b\x2d\x4a\x2c\xc9\xcc\xcf\xe3\xb2\xb5\xb5\xe5\xe2\x42\x16\x4c\x55\x48\xce\x4f\x49\x55\x00\x04\x00\x00\xff\xff\x8b\x5f\x48\x80\x28\x00\x00\x00")

func httpReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_httpReadmeMd,
		"http/README.md",
	)
}

func httpReadmeMd() (*asset, error) {
	bytes, err := httpReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpGrpcClientGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x2f\x2a\x48\xd6\x4b\xce\xc9\x4c\xcd\x2b\x51\xaa\xad\xe5\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\xe7\x03\xb4\xbc\x20\x00\x00\x00")

func httpGrpcClientGogoBytes() ([]byte, error) {
	return bindataRead(
		_httpGrpcClientGogo,
		"http/grpc.client.gogo",
	)
}

func httpGrpcClientGogo() (*asset, error) {
	bytes, err := httpGrpcClientGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/grpc.client.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpHttpClientGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\xcd\x6e\xdb\x30\x0c\xc7\xcf\xd6\x53\x70\x46\x30\xd8\x85\x2b\x60\xd7\x0e\xb9\xac\x18\xb0\x0d\xeb\x07\xda\x6e\x97\x61\x07\x4f\x61\x53\x2f\xa9\xa4\xca\x72\xda\x42\xd0\xbb\x0f\x94\xe4\x36\x71\x9c\x26\xf3\x21\x89\xa4\x3f\x3f\x44\xfe\xe8\x38\x37\xc3\xdb\x46\x22\xe4\x77\xd6\x6a\x2e\x96\x0d\x4a\x9b\x7b\xcf\x9c\x3b\x86\x89\xfa\xf3\x17\x4e\xa6\xc0\xe1\xd8\x7b\xc6\x9c\x33\xb5\x9c\x23\x4c\x5a\x34\xab\x46\x20\x1d\x91\x84\x5f\xc7\x75\x1b\x64\xf6\x59\x23\x7c\xb9\xb9\xb9\x74\xae\x17\xf2\xf3\xfa\x1e\xbd\x3f\x0d\xce\xa1\xb5\xa6\x13\x16\x1c\xcb\x8e\x62\x38\x4e\xea\x78\xc8\x3c\x63\xb7\x9d\x14\x70\x8e\x8f\x6f\xf8\x28\x94\xb6\x2d\x70\xce\xb7\x1c\x5c\x68\x5b\xc2\xae\xc8\x8e\x65\xf3\x60\x79\x32\x85\x5f\xbf\xc7\x6c\x9d\xef\x25\x53\xa8\xb5\x46\x39\x2b\xc2\xb2\x82\xa4\xfe\x89\xa6\x6d\x94\x2c\xf2\xd5\x87\xbc\x2c\xf7\x88\x2f\x6b\xb1\xa8\xe7\x48\x39\x14\xb9\x73\xa1\x56\x69\x2f\x25\xb6\xdf\x47\xaa\xed\x8b\x8f\xcd\x8b\x91\x3d\x00\x00\x75\xab\x6f\x8e\xd2\x36\x74\xa6\x57\x5e\x68\xdb\x28\x19\x9b\x03\xe9\x21\x7d\x73\x0b\xf8\x10\xf5\xc1\x1b\xe4\x54\x56\x92\xf2\x64\x5a\xe6\x1b\x46\x83\x40\x8b\x0a\x26\xab\x18\x89\x5c\x9c\x2a\xd9\xda\x5a\x5a\x7e\x56\xeb\x2d\xb3\x41\xcc\x05\xe4\xab\x58\xc8\x7c\x44\x78\x58\x03\x9c\x9b\xac\xf8\xb5\xea\x8c\x58\xab\xc3\x30\x1e\xca\xd9\xe8\x15\x86\xfb\xc3\xbd\xb4\xf6\x3b\x71\xa0\x4f\xce\x79\xc9\x32\x83\xb6\x33\x12\xde\xbf\x81\xab\x63\x59\xf6\x8a\xd9\x49\x7f\x95\xc4\x78\x42\x7a\xde\xbb\xac\x58\xe6\xd9\xfa\xb8\xdd\xa3\xbd\x53\xb3\x8d\x9e\x9e\x85\xad\xd8\xd3\x30\x2f\x85\x80\xa3\x37\x32\x08\x33\x11\xfd\xa4\xfd\x42\xd8\x27\x10\x4a\x5a\x7c\x0a\xbd\xa3\xef\x0a\x1a\x09\x47\xaf\xca\x2b\x7c\xe8\xb0\xb5\x37\xcf\x1a\xbd\x8f\x77\xa6\xa1\x9b\x1b\x2d\xf8\x69\xbd\x5c\x46\xb2\x4a\x28\x36\x6c\xa8\x1c\x6d\x6f\x83\xc6\x28\x53\xd2\xe4\x19\x7c\x08\x4b\xba\x87\xe0\x67\xf5\x02\x93\xfb\x82\x65\x59\x3e\x4c\x2f\xaf\xd8\x08\x72\x91\xcf\x50\x89\xa4\x1e\x83\x7b\x00\x5b\x34\x1a\x22\x4e\xaf\xbb\x11\xbe\x77\x32\x9e\xbc\xec\xa5\x7c\x9b\xf4\x98\xe9\x18\xe8\xf4\x50\x1e\x89\x87\xd8\xd4\x2d\xb2\xab\x9d\x31\xc6\xe8\x1e\xcf\xa1\x33\xcd\x01\x09\xfc\xb8\xfa\x5e\x6c\x2c\xbf\x6e\x8f\xd9\xff\x67\xb3\x76\x36\x66\x0a\x70\xe8\x74\xd2\x34\x66\x6b\xf9\x05\x6a\xa5\x5d\x4f\xf9\xf2\xd3\xb7\xeb\x8b\xf3\xa2\x91\x94\x68\x56\xb2\x8c\x4a\x60\x0c\xbc\x9b\x82\x6c\x96\x84\x61\x3f\xaf\xb2\x59\x06\x1c\x69\xd8\x32\xd5\x85\x57\xa6\xc4\xc7\x62\x07\xc9\xaf\xae\x02\xbe\x9f\x9f\x50\x74\x16\x69\x88\x2a\x08\x64\xbf\x24\x70\x85\xad\x56\xb2\xc5\x42\x75\xb6\x2c\x3f\x1e\x12\x3e\xed\xa9\xce\x56\x74\xc0\xe2\xbf\x6f\xbc\xf1\xfa\xaf\xbe\x2e\xf4\xfc\x0b\x00\x00\xff\xff\xcd\x3a\x7f\xe0\xb9\x07\x00\x00")

func httpHttpClientGogoBytes() ([]byte, error) {
	return bindataRead(
		_httpHttpClientGogo,
		"http/http.client.gogo",
	)
}

func httpHttpClientGogo() (*asset, error) {
	bytes, err := httpHttpClientGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/http.client.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpHttpGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4e\x03\x31\x0c\x45\xd7\xcd\x29\xac\x88\x05\x2c\x48\xf6\x48\x5c\x01\x71\x85\x34\x63\xdc\xc0\xc4\x8e\x52\x83\x2a\x59\xb9\x3b\x9a\x4e\xba\xa4\x62\x67\xe9\xff\xf7\x94\x7c\xb3\x05\x3f\x0a\x23\xf8\x93\x6a\xf3\x63\xb4\x94\xbf\x12\x21\x98\x85\xf7\xfd\x0c\x6f\xa9\xe2\x18\xce\xec\x41\x8e\x9f\xf0\xf2\x0a\x61\x0c\x57\x6a\x93\xae\xf0\xe8\x0e\x3e\x0b\x2b\x5e\xd4\xbb\x83\x67\xd4\x78\x15\x39\x07\x00\xe0\xa9\xe8\xe9\xfb\x18\xb2\xd4\x78\x79\xae\xb2\x44\x69\x5a\x84\xcf\xfe\x8f\x78\x63\xf3\x5a\x90\x37\xdb\x7e\xdc\x6d\x45\xea\x2d\xef\xb2\x33\xf6\x1f\xec\xff\x6d\x7b\x12\xa1\x15\x03\xc9\x9a\x98\x82\x74\x9a\xe1\x93\x73\xf1\x8a\x4c\x5f\x61\x45\xea\x49\x0b\x93\x33\x53\xac\x6d\x4d\x3a\xe7\x0a\x7b\xc7\xc3\x36\xcc\x18\x37\x72\xbe\xfb\x2e\x39\x3f\x79\x23\xcd\x90\x97\xcd\xf0\x1b\x00\x00\xff\xff\xa3\x2d\x1c\x9a\x90\x01\x00\x00")

func httpHttpGogoBytes() ([]byte, error) {
	return bindataRead(
		_httpHttpGogo,
		"http/http.gogo",
	)
}

func httpHttpGogo() (*asset, error) {
	bytes, err := httpHttpGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/http.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpHttpServerGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcf\x6e\xdb\x3e\x0c\x3e\x4b\x4f\xc1\x9f\x51\x14\x76\xe1\xfa\x01\x02\xf4\xf2\xdb\x0e\xdd\xa1\x6b\xd1\x74\xdb\x61\x18\x0a\xcf\x61\x5a\x2d\x89\xec\xd0\x8a\xdb\x41\xd0\xbb\x0f\xfa\x93\xda\x71\xe4\xb5\x03\xaa\x4b\x62\xf1\x23\x3f\x8a\xfc\x24\x6a\xbd\xc0\xa5\x90\x08\xc9\xa3\x52\x4d\xd1\x22\x75\x48\x89\x31\x5c\xeb\x73\x38\xa9\x7f\xfe\x82\xd9\x05\x14\x70\x6e\x0c\xe7\x5a\x53\x29\x1f\x10\x4e\x2c\x4a\x54\x68\x4d\x16\x52\xcc\xfd\x77\xeb\x60\xcb\x9d\xac\xe0\x16\x1f\x44\xab\x90\xb4\xde\x83\x8b\xcf\xe5\x06\x8d\xb9\xbc\xbb\xbb\x99\x3b\x92\xb4\x85\x33\x4f\x57\xf4\x9b\x39\xb4\xd4\xc1\x91\x97\x37\x66\x80\x44\x35\x81\xe6\x8c\x50\xed\x48\x42\x5b\xec\x89\x42\x0a\xe9\xe9\xfd\x91\xf3\xbd\x0d\x7f\x1f\xf6\x3e\x62\x5b\x39\x92\x8c\x1b\xce\xbb\x92\xe0\x0d\x0e\x70\x01\x21\xd3\x79\xbf\x49\xa2\x51\xa2\x96\x9a\xb3\x9b\xb2\x5a\x95\x0f\x68\x9d\x67\x00\x89\xd6\xae\x28\x61\x37\xc4\x4c\x72\xce\x82\xf3\x00\x77\xc8\x6b\x31\x9f\x36\xcd\x1a\x37\x28\x6d\xe8\x19\xa4\x67\x53\xa5\x48\xa5\x58\x67\x39\x07\x00\xe8\xdb\x52\x37\xca\xf5\x64\xef\x71\xed\x32\xf4\x6d\x81\xb0\x6c\x5f\xc5\x12\x70\xeb\xf1\x2e\x2a\x24\x69\xed\xa1\x45\x70\xcd\x92\x03\x27\xbb\x7c\xb0\x19\x9c\xee\xa1\xe1\x38\xd7\xa1\x0c\x30\x5a\x96\x28\x24\xb6\xca\xe1\xa4\xf3\x99\x59\xca\x0f\xb5\x6c\x55\x29\x55\x71\x55\x36\x23\x92\x48\x96\x2b\x48\x3a\xa4\x56\xd4\x32\x99\x00\x7f\xf5\xe6\x99\x2b\x69\x57\xcc\xeb\x1d\x55\xbe\x9c\xf1\xd0\x28\x17\x47\xa7\x9b\xb6\x98\xfc\xa0\x76\x43\x48\xf8\x36\x86\xb3\x2b\x54\x8f\xf5\xa2\x9d\xc1\xf7\x1f\x41\x2a\x7e\xe7\x40\x29\x7d\x9c\x50\x98\x8d\xc3\x1c\xf4\x2c\x04\x72\x1c\x8c\x69\xce\x58\x88\xed\x65\x63\x8f\xe8\xbd\x06\xa2\x61\xec\xb2\x94\x8b\x35\xd2\xcc\x46\x8f\x08\x7a\xec\xe4\x15\x1e\x9c\x0e\xcb\xf4\x92\x9b\x6f\xb3\xcb\x2d\xf8\xc6\xe4\x14\x69\x98\x77\x1c\x0b\xcb\x3e\x2f\x11\x55\x41\x4c\x59\x97\x4a\x35\x53\xb2\x82\x29\x69\x05\xda\xa1\xb8\xa2\x6c\x91\x8c\x57\x90\xf8\x23\x4e\x29\xcc\x2e\xdf\x85\x37\x8a\x2c\xa6\x96\xd7\x93\xd8\x91\xf8\x5b\x06\x5f\x48\xbc\x23\x7d\x2f\xde\xb1\xc5\xe4\x53\x31\xa3\x6d\x8f\x91\x0c\x6e\x06\x3b\x0e\x37\xbe\x50\x16\x66\x72\x3e\x1c\x31\xaf\xdc\x0c\x37\x64\xfe\x55\xe8\xa9\x9d\x2d\x42\x2a\xa4\x65\x59\xa1\x36\x39\x54\xea\x19\xaa\x5a\x2a\x7c\x76\xaf\x92\xfd\xcd\xe1\x89\xc0\xcd\xc2\x5b\x6c\x9b\x5a\xb6\xf8\x8d\x84\xb2\x93\x89\x70\x0b\x67\xc1\xb2\xdd\x61\xab\x32\x3b\x89\x84\xbb\x22\x12\x9f\xd2\x9e\x3b\xd8\xef\x7e\x37\x68\x4c\xc6\x19\x12\x59\x50\x78\x18\x6e\xfe\x0f\xf6\x94\x70\x9b\x83\x90\x19\x67\x56\x03\x44\xf0\xdf\x05\x48\xb1\xb6\x61\xd9\x00\xec\xd3\x48\x9f\x28\xb7\xd6\xdc\x22\x33\xce\xc2\x0c\xe4\xcc\x70\x56\xef\x94\xdb\x76\x2c\xd4\x15\xe9\xd4\xd8\x28\xc6\x05\x4a\x5f\x78\xc2\xf9\x7d\x52\x95\x7a\xce\xde\x27\xb5\x38\x78\x9f\xb0\x9d\xc2\xbd\x08\x5e\xfe\x01\xef\xdf\x62\xfe\x27\x00\x00\xff\xff\x4f\x80\x63\x07\xa3\x08\x00\x00")

func httpHttpServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_httpHttpServerGogo,
		"http/http.server.gogo",
	)
}

func httpHttpServerGogo() (*asset, error) {
	bytes, err := httpHttpServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/http.server.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _implImplGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc9\x4d\x0a\xc2\x30\x10\x06\xd0\x75\xbf\x53\x84\xc1\x85\x2e\x4c\xf7\x82\x57\x10\xaf\xd0\x26\x63\x1b\x35\x3f\xc4\x51\x0a\xc3\xdc\x5d\xd0\xdd\x83\xa7\x1a\xf9\x96\x0a\x3b\x4a\xb9\x3d\xc9\xac\x4d\xe1\x31\x2d\xec\x54\xfd\xf5\x4f\x7f\x99\x32\x9b\x41\x75\x57\xe7\xbb\x3b\x9d\x9d\x37\x43\xca\xad\x76\x71\x7b\x0c\x14\x6a\x11\xde\x84\x30\x50\x61\x19\x57\x91\x46\xc0\x40\x4b\x92\xf5\x3d\xfb\x50\xf3\xb8\x1d\x73\x8d\xbf\x79\x71\xff\x70\x27\x1c\x00\x55\x2e\xd1\x0c\xf8\x06\x00\x00\xff\xff\xc0\x99\xe0\x65\x85\x00\x00\x00")

func implImplGogoBytes() ([]byte, error) {
	return bindataRead(
		_implImplGogo,
		"impl/impl.gogo",
	)
}

func implImplGogo() (*asset, error) {
	bytes, err := implImplGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "impl/impl.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"http/README.md": httpReadmeMd,
	"http/grpc.client.gogo": httpGrpcClientGogo,
	"http/http.client.gogo": httpHttpClientGogo,
	"http/http.gogo": httpHttpGogo,
	"http/http.server.gogo": httpHttpServerGogo,
	"impl/impl.gogo": implImplGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"http": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{httpReadmeMd, map[string]*bintree{}},
		"grpc.client.gogo": &bintree{httpGrpcClientGogo, map[string]*bintree{}},
		"http.client.gogo": &bintree{httpHttpClientGogo, map[string]*bintree{}},
		"http.gogo": &bintree{httpHttpGogo, map[string]*bintree{}},
		"http.server.gogo": &bintree{httpHttpServerGogo, map[string]*bintree{}},
	}},
	"impl": &bintree{nil, map[string]*bintree{
		"impl.gogo": &bintree{implImplGogo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

