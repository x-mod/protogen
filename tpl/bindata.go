// Code generated by go-bindata.
// sources:
// tpl/grpc/grpc.client.gogo
// tpl/grpc/grpc.server.gogo
// tpl/http/http.client.gogo
// tpl/http/http.server.gogo
// tpl/service/service.gogo
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _grpcGrpcClientGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x51\x4b\x1c\x3d\x14\x86\xaf\x37\xbf\xe2\x7c\x41\x3f\x12\x19\xa3\x77\x2d\x0b\x73\x51\x2c\x14\x8b\x58\x61\x17\x7a\x21\x52\xc6\x4c\x66\x9a\x76\x36\x09\x49\xb6\x22\xc3\xfc\xf7\x72\x92\xa8\xab\xae\x83\x37\xdd\x8b\xd9\x24\x7b\xf2\x9e\xe7\xbc\x73\x92\x1d\xc7\x56\x75\xda\x28\xa0\xbd\x77\x52\xc8\x41\x2b\x13\x29\x1c\x4f\xd3\x38\x1e\xc3\x81\xbd\xfd\x05\xcb\x1a\x04\x2e\x10\xd7\xc8\xdf\x4d\xaf\x60\x1c\x71\x5d\x5c\xe5\xa9\xb8\x6c\x36\x6a\x9a\x08\xd1\x1b\x67\x7d\x04\x46\x00\x00\xa8\xf4\xf7\x2e\xda\x93\x38\x04\x9a\x17\xba\x4d\x2c\xa3\x10\xbd\x36\x7d\xa0\x24\x4d\xdd\x2d\xd0\xa2\x78\x9e\x14\xae\x6e\xa7\xa9\x44\xf6\xd6\xf6\x83\x12\xbd\x1d\x1a\xd3\x0b\xeb\xfb\x13\xa4\xa4\x84\x13\x82\x78\xbe\x31\xbd\x82\x83\xa0\xfc\x1f\x2d\x15\x82\x26\x99\x55\x9e\x87\x69\x22\xdd\xd6\x48\xe4\x2d\x21\x85\xf5\x8b\x77\x12\x47\x8c\x43\x66\x81\x31\xe5\xf3\x2a\x6e\xbd\x29\x6b\x41\x7c\xb5\xda\xb0\xeb\x9b\x3c\x1d\x1f\x56\xd7\xf6\xc2\xde\x29\xcf\xe8\x5e\x1b\x28\xaf\x60\x5f\xe4\x73\x00\xca\xa7\x0a\xe8\x31\xe5\x64\x0e\xf1\xca\xfa\xc8\x38\x68\x13\x9f\xf3\x7d\x38\xfd\x78\x3a\xbb\xf1\x53\xdb\xfa\x37\x6a\xeb\x36\x51\xac\x9c\xd7\x26\x76\x8c\x1e\x86\xe5\x61\x4b\xab\x39\x83\xde\xf8\x31\xa3\x21\x3e\x89\xf7\x4e\xed\x0f\x3a\x4b\xcd\x84\x18\x5b\x19\x33\x45\xd3\xb6\xbe\x70\xa5\x79\x1c\x02\xc0\x51\x1c\x82\x38\xb3\xa6\xd3\x7d\xe9\x08\xf1\x4a\x2f\x6b\xbd\x27\xdf\x37\x17\xb5\x35\x80\xee\xb0\xa3\x99\x38\x4e\xb2\x83\x68\x96\x0a\x81\xed\xa0\xf1\x77\xe8\x3f\x77\x15\x93\x49\x98\x4d\x97\x37\xe0\x47\x8a\x94\xab\x4e\x6e\xa4\xd5\x09\x0b\x4b\x34\xeb\x8b\x55\x76\x82\xa1\x35\x3b\xce\xfc\x73\x26\xcc\x57\xe3\x0b\x79\x41\x74\xa9\xee\x66\x24\x98\x75\x31\x80\x10\xaf\xdf\xd8\x4b\x3a\x0e\xb3\xaf\xa3\x02\xe5\xbd\xf5\xbc\x14\x21\xf1\x34\xff\x3f\x13\xff\x84\x8e\x2e\x2e\xe7\x0e\x42\x55\x2a\xc2\x67\x67\x3d\xfc\xa8\xc0\xba\x88\x09\xf2\x05\x92\x4a\x78\xd2\xb3\x2e\x32\xc9\xcb\x9e\xf4\xd5\xa7\x88\x65\x0d\xd7\x37\xe9\x96\xfc\xac\x9b\x21\x17\x35\x66\x55\xdd\x15\x03\xff\xab\xc1\xe8\x61\x47\x2c\x6f\xad\xa1\x71\x4e\x99\x96\xa5\x69\x05\x49\xe5\xbb\x8e\x3f\xd7\xbe\x31\x01\x2f\xbd\x33\xaf\x5a\x65\xa2\x6e\x86\xc0\xe4\xd3\x58\x5c\xaa\xbb\xf5\xc5\x8a\x25\x75\xce\x0b\x15\xa8\x21\xa8\xf7\x27\x39\x37\x41\xc9\xad\x57\xec\x61\x3f\x3e\xb3\xcb\xd6\x98\x64\x3c\x16\xf7\x58\x1a\xcb\x0d\x5a\x65\x5d\x21\x04\x27\x0b\xdd\xa5\xb0\xc7\xfa\x16\x8b\xd2\x66\x46\x0f\x49\x81\x2c\xb2\x15\xf2\xad\xb3\x0b\x35\x1e\xec\x7d\xdd\x54\x3a\x09\x61\xf8\x6e\x07\xcb\x0a\xd5\xc9\x94\xee\x7a\x65\xda\x09\x47\xca\xb4\xf8\x67\xf4\x37\x00\x00\xff\xff\x65\xa8\xbf\xb0\xb8\x06\x00\x00")

func grpcGrpcClientGogoBytes() ([]byte, error) {
	return bindataRead(
		_grpcGrpcClientGogo,
		"grpc/grpc.client.gogo",
	)
}

func grpcGrpcClientGogo() (*asset, error) {
	bytes, err := grpcGrpcClientGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grpc/grpc.client.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _grpcGrpcServerGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x51\x6b\xe4\x36\x10\xc7\x9f\xad\x4f\x31\x35\xa1\xc8\x61\xa3\x0d\x7d\x69\x59\xf0\x43\x09\xa5\x04\xc2\x36\x74\x43\x5f\x4a\x29\x5e\x7b\xac\xf3\x9d\x2d\xe9\x24\xed\x26\xc1\xf8\xbb\x1f\x33\xf6\x26\xce\x2d\xd9\xdc\x1d\xe4\xc9\x96\x34\x9a\xf9\xcd\x7f\x66\xec\xbe\xaf\xb0\x6e\x0c\x42\xaa\xbd\x2b\x55\x40\xbf\x47\x9f\xc2\xc5\x30\xf4\xfd\x05\x9c\xd9\xed\x47\x58\xe5\xa0\x68\x43\xb8\xa2\xfc\x54\x68\x84\xbe\xa7\x7d\x75\x3b\x2e\xd5\xba\xe8\x70\x18\x84\x68\x3a\x67\x7d\x04\x29\x92\xb4\xb4\x26\xe2\x43\x4c\xe9\xd5\x3f\xba\x68\x97\xb1\x0d\xb4\xaa\x3b\xde\x34\x18\x53\x21\x12\xb7\x85\x74\x72\x76\xcd\x97\x6f\xb7\xc3\x40\xe7\xba\x89\x1f\x76\x5b\x55\xda\x6e\xf9\x70\xd1\xd9\x6a\xa9\x5b\xab\xf9\xc0\x5a\xdd\xa2\xd2\xb6\x2d\x8c\x56\xd6\xeb\x25\x61\xbf\x7e\xb2\x2c\x3d\x56\x68\x62\x53\x50\xfc\x4c\x08\xca\xca\x17\x46\x23\x9c\x51\xae\x4d\x89\x94\x1f\x23\x6c\xc6\x75\x18\x06\x11\x1f\x1d\xa7\x39\x99\x4c\x29\xfe\xe9\x5d\xb9\x61\x81\x20\x44\xbf\x2b\x63\x2f\x00\x00\x8a\xaa\xe2\x8d\xc6\x68\x91\xc4\x36\x00\x9c\xc7\x36\xa8\x2b\x6b\xea\x46\x8b\x44\x8f\x9a\xc2\x39\x0b\x3c\xde\x17\xc9\x21\xb8\xdb\xaa\xa3\x38\x93\xcd\x20\xde\xe4\xf8\xcb\xc5\xc6\x1a\xa8\x77\xa6\x94\xe7\x27\xec\x32\x21\xc8\x06\x7e\xaf\x2a\x8f\x21\xc8\x19\x72\xf6\x0d\xfe\x7b\x91\x78\x8c\x3b\x3f\x45\x0a\xfb\x12\x4e\x46\xa3\x0b\x49\xd8\x97\x8a\xe3\xe4\xac\x90\x48\x06\xca\x88\x31\xee\x6e\x36\xa3\x3a\x92\xe4\x9a\xa9\xf5\xae\x30\x14\x2b\x87\xd8\x86\x39\xca\x54\x74\xf9\x76\x3d\xde\x95\xed\x10\x3e\x87\xe9\x6d\xce\xb8\xc6\xfb\x13\x4e\xa4\x75\x31\x80\x52\xc7\xdc\x5f\xe3\x65\x27\x61\x88\x65\x6a\xd5\x55\x0e\x3f\x9f\xb0\x24\x68\x2a\xe9\x0a\xd2\xd5\xaf\x97\xbf\x5d\xa6\x0b\xa2\x4d\x6a\xeb\xe1\xff\x05\x58\x17\xc9\xc1\x38\x64\xcc\x46\xf6\xd6\x45\x19\xa6\x5e\x24\x63\xcd\x27\xab\x1c\xfe\xfd\x6f\x36\x17\x23\x67\x3f\x88\xa4\xa9\x61\x34\xe7\xb2\xfd\x94\x83\x69\x5a\x76\x34\x5e\xcc\xa1\x70\x0e\x4d\x25\x79\xb9\x00\xf6\x71\xe5\xb1\x0a\x72\x36\xf1\x6a\x8d\xf7\x77\x37\x1b\xf9\xec\x29\xcb\x38\x3c\x8d\xed\xb4\x79\x18\xcf\x7c\xf4\xb1\xc6\xfb\x49\x56\xf6\xac\x94\xca\x12\x36\x9f\xea\x1a\x9e\x66\x93\x4b\x23\x83\xdf\xbf\x51\x62\x7e\xca\x32\x3e\xc0\xf4\x55\xa4\x5e\xa7\x67\x06\xe8\xbd\x25\xdd\xc9\x3f\x25\xec\xf7\xcf\x8d\x90\xc3\x53\xca\x87\x96\xea\xa2\xfa\x83\x6e\xd4\x32\x3d\x8a\x08\x4d\xe7\x5a\xec\x28\x71\x6b\xc0\xe3\xe7\x5d\xe3\xb1\x4a\x47\xb1\xdd\x56\xfd\x8d\xba\x09\x11\xfd\x2b\xcd\x4d\x79\x1c\xa4\x58\xcc\x41\x32\x86\x6b\xcd\x82\x60\xa9\x5e\x06\xa3\xba\x21\x57\x46\xa6\xb1\x74\xe9\x68\x4d\xed\x90\x71\xd5\xc8\x6c\x56\xae\x89\x1d\x3d\x7f\x00\x44\x42\x1f\x72\xf5\x8f\xfc\x25\x53\xd7\xa6\xb6\xad\x91\xfc\xdf\x99\x64\x05\x79\x84\x97\x8d\x03\x61\x34\x14\x11\x5e\x06\x3b\x54\xe4\x99\x7c\xec\x22\xd9\x9a\xec\xbb\x0a\x14\xad\x93\x3c\x8a\x2f\x5c\xf1\xee\x0f\x01\x47\xeb\x1c\x6b\x3f\x8c\xff\x1b\x34\xd5\x30\x88\xbe\x47\x53\xf1\x7f\x54\x7c\x09\x00\x00\xff\xff\x7a\x33\x51\x73\x75\x07\x00\x00")

func grpcGrpcServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_grpcGrpcServerGogo,
		"grpc/grpc.server.gogo",
	)
}

func grpcGrpcServerGogo() (*asset, error) {
	bytes, err := grpcGrpcServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grpc/grpc.server.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpHttpClientGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xe2\x38\x13\x3e\xc7\xbf\xa2\x5e\x8b\x19\x39\xad\x90\xee\xe3\x88\x57\x1c\x76\x47\xbb\x9a\x19\xf5\x07\x6a\xd8\xd3\x6a\xb5\x82\x60\x68\x6f\x83\x9d\xb6\x1d\xba\x5b\x51\xfe\xfb\xaa\x6c\x07\x4c\x80\xcc\x68\xa5\xb9\x40\xec\x7a\xaa\xea\x71\x55\xb9\xca\x75\xbd\xe4\x2b\x21\x39\xd0\x27\x6b\xcb\xbc\xd8\x08\x2e\x2d\x85\x61\xd3\xd4\xf5\x10\x06\x6a\xf1\x0f\x8c\xc6\x90\xe3\x06\x29\xe7\xc5\xf3\x7c\xcd\xa1\xae\x71\x3f\x9f\xf8\x65\x7e\x3f\xdf\xf2\xa6\x21\x44\x6c\x4b\xa5\x2d\x30\x92\xd0\x42\x49\xcb\xdf\x2c\xc5\x4f\xfd\x5e\x5a\x75\x6d\x37\x06\x57\xab\xad\xdb\x34\x56\x0b\xb9\x36\x94\x90\xa4\x5c\x00\x0d\x06\xbf\x3a\x03\x93\x45\xd3\x20\x66\x2d\xec\x53\xb5\xc8\x0b\xb5\xbd\x7e\x1b\x6e\xd5\xf2\x1a\x09\x06\x7e\xfd\xe2\xeb\xb5\x2e\x0b\x4a\x52\x42\xf0\x0c\x7a\x2e\xd7\x1c\x06\x86\xeb\x9d\x28\x38\x9e\xc6\x39\x9b\xfa\xb5\x69\x1a\x87\x1a\xec\xb8\x36\x42\x49\x94\xd3\xdd\x8d\x8b\x00\xa9\xeb\x56\x59\x95\xd6\x69\x06\x2b\xf9\x43\x69\x85\x92\x26\xa0\x86\x20\x56\xc0\x5f\x3c\xce\xc5\x03\x28\x53\x1e\x92\x07\x95\xd4\x9b\x04\x00\x88\x58\x3d\x67\x30\xd8\x79\xcb\xa8\xfa\x59\x49\x63\xe7\xd2\xe6\x77\xf3\x32\x80\x5b\x85\xe0\xe1\x19\x68\x60\x4a\x3b\x80\xfd\x09\xc6\x30\xd8\xe5\x53\x55\xe9\x82\xef\x5d\x7a\x10\x97\xcb\x88\x44\xbb\x42\xe5\xce\x37\xa6\x73\x55\xc9\x02\x53\xdd\x1e\xd9\xa7\xf9\xcb\x6c\x36\xc1\x2f\x96\x82\x4f\x22\xd4\xce\x9c\xe6\xb6\xd2\x32\xec\x99\xfc\x9b\x12\x92\xfd\xf9\x97\x5f\xd6\xed\xee\x4c\xdd\xaa\x57\xae\x19\x3d\x5b\x41\x34\xcd\xe0\x1c\xf2\x98\x00\x4d\x9b\x0c\xe8\x90\xa6\xa4\xe9\xa1\x38\x51\xda\xb2\x14\x84\xb4\xc7\xfc\x3e\xdd\x7c\xba\xe9\x55\xfc\x65\xb9\xd4\x17\xce\xb6\xda\xda\x7c\x5a\x6a\x21\xed\x8a\xd1\x0f\x66\xf4\x61\x49\xb3\xbe\x00\x5d\x10\x7a\x6a\x48\x9f\xd8\xf7\x92\x9f\x07\x7d\x76\x85\x8c\x34\xaa\x02\x8f\x90\xcc\x97\x4b\x1d\xf2\xe8\xb9\x91\xc4\x14\x4f\x7c\xcb\x8f\xb6\xec\xc6\x40\x02\x00\x57\x76\x63\xb0\x98\x56\x62\x4d\x12\x7f\x29\x1c\xee\xea\x70\x49\x72\xef\xe2\x47\x68\x3c\x94\x16\x30\x62\xec\xaa\x07\x94\x86\x8a\x99\xdd\x4e\xbd\x63\x86\x64\x22\x22\xe9\xf7\x5c\xd4\x24\x69\x23\x8d\xce\x0a\xe8\x75\x87\xf0\xa4\xc8\xd1\xc9\x18\xec\xc6\x90\xa4\x21\x6d\xd5\x4e\x5d\x64\x58\x08\x90\x0f\xce\xcf\x71\x1f\x5c\x8c\xc1\x7f\xc4\x24\x3c\x90\x85\xe8\x9f\x46\xfe\xe7\x10\x0a\xee\xc6\xe0\x3f\x62\x42\xf7\xfc\xb5\xc7\x00\xf6\x2b\x03\x79\x9e\xf7\xb3\x4a\x7b\x59\x20\x89\x02\xdb\xd9\xc7\x1e\x10\x12\xf5\xe1\x1a\xf9\xa9\x43\x33\x20\x89\xab\xf0\x51\xdf\xa5\xcc\xf0\x30\xc9\x4a\x69\xf8\x3b\x83\xd0\x90\x7d\x1b\x75\xd4\xd1\xac\x2a\x2d\x2b\x52\x87\x13\x2b\xf0\xd5\xf1\xbf\x31\x48\xb1\xe9\xe6\xcb\x39\xc6\x91\xd4\x42\xdb\xc0\xc5\xe8\x7d\x30\xa3\xe4\xdd\xf3\x57\x16\x2d\x0f\xe5\xee\xbc\xa5\xde\x79\xc8\x5b\x81\xb1\xdf\x0f\x91\x2d\xb7\x4f\x6a\x79\x34\x46\xee\xdc\x96\x89\xe6\xc2\x00\x6d\x1f\x90\xb4\x54\xc6\x1e\x4f\x8e\x41\xa5\x85\x13\x9d\x1d\x28\x7e\xea\x38\x27\xde\xca\xd1\xa8\x3a\x33\x50\xbc\x42\x77\x68\x21\x8b\x68\x62\xc5\x7a\x27\x93\x2b\x58\x88\x67\xd7\x89\xe2\xe9\x14\xf3\xec\xe8\x05\x5c\x1c\x86\x4b\xf3\x2c\xc6\xc7\x93\xed\xb2\xcf\x4a\x8b\x8b\x0e\x31\xaa\xff\xd5\xd3\x61\x6a\x5e\x42\xc6\x6b\x77\x19\xbf\x7f\x9d\xeb\x36\x81\x5e\xc6\x0a\xfb\x06\xe1\x5d\x85\xb1\xc6\xff\x0c\x84\x84\xab\x72\x91\x1f\xc0\x8f\xfc\xa5\xe2\xc6\xce\xde\x4b\xde\x34\x29\xb0\xae\x14\xeb\xd2\x78\x69\x06\x5c\x6b\xa5\x53\xdf\x68\x5e\xdc\x12\x13\x1a\x55\xf7\xdd\xfc\x99\x07\x8b\x8c\x24\x49\x2c\x71\x06\xdd\x7c\x3e\xa4\xca\xcd\xf0\x63\xdc\x1f\x8f\xb7\xa8\x19\x6f\x85\xee\xdc\x5e\x46\xa7\x11\xcb\xbf\x28\x63\x59\x91\x63\x3f\x48\xb3\x4e\x9c\x43\x2e\x31\x59\xf4\xb4\x3c\x8f\xfc\x7e\x65\xf8\x0c\xc4\x8f\xdf\x95\xde\xce\xad\xe3\x1a\xde\x48\x4d\x43\x33\xb8\xf0\x0a\xf1\x82\xce\xa3\xc3\x6f\x1e\x25\x84\xa6\x27\xec\x86\xc0\x37\xe6\xb4\x74\x3a\xb4\xd0\x52\xa5\x85\x0f\xd6\xf9\x32\x4a\x92\x6e\x1c\x5d\xc6\xa5\xed\xc6\x72\xf2\xeb\xb7\xe9\xc3\x3d\x13\xd2\xe1\xf1\x27\x75\xfd\x0c\x53\x19\x35\xbe\xd0\x8f\xa4\xd8\xb8\x2c\xbb\x1e\xa5\x2a\xd7\x41\x3f\x5e\x2e\x90\xba\xd9\xdb\x1a\x8d\xf7\x2d\x32\xff\xed\x8d\x17\x95\xe5\x58\x90\x19\xb8\xc2\x71\x81\xf6\x54\x1e\xb9\x29\x95\x34\x9c\xa9\xca\xa6\xe9\xff\x7f\x84\x48\xd8\x53\x95\xcd\x50\x40\xf0\x15\xda\xde\x95\xe8\x41\x1a\x6d\x92\x7f\x03\x00\x00\xff\xff\xc0\xcc\x27\x85\xb6\x0c\x00\x00")

func httpHttpClientGogoBytes() ([]byte, error) {
	return bindataRead(
		_httpHttpClientGogo,
		"http/http.client.gogo",
	)
}

func httpHttpClientGogo() (*asset, error) {
	bytes, err := httpHttpClientGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/http.client.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _httpHttpServerGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x6f\xab\x38\x14\x5d\xe3\x5f\x71\xc7\x8a\x46\x50\x11\x77\xd6\x95\xb2\x99\x91\x46\xed\xa2\x9d\x28\xed\x68\xd6\x84\xb8\x09\xd3\xc6\x26\xc6\x90\x54\xc8\xff\xfd\xe9\xda\x86\x38\x90\xd2\x3e\xbd\x6c\x08\xf6\xbd\xe7\xdc\xcf\x43\xdb\x6e\xf8\x6b\x21\x38\xd0\x9d\xd6\x25\xab\xb8\x6a\xb8\xa2\x30\x37\xa6\x6d\xe7\x30\x93\xeb\xff\xe1\x6e\x01\x0c\x0f\x48\x99\xe5\x6f\xd9\x96\x43\xdb\xe2\x39\x5b\xba\x57\xf6\x94\xed\xb9\x31\x84\x14\xfb\x52\x2a\x0d\x31\x01\x00\xa0\xb9\x14\x9a\x9f\x34\x25\x11\x15\x5c\xdf\x22\x3a\x25\x24\x2a\xd7\x40\xbd\xff\x83\xb5\x5f\xae\x8d\x41\xa3\x6d\xa1\x77\xf5\x9a\xe5\x72\x7f\x7b\x9a\xef\xe5\xc6\x7a\xf8\x70\xa6\xaf\x6f\xb7\xaa\xcc\x29\x49\x08\xc1\x90\x55\x26\xb6\x1c\x66\x78\x55\xe4\x1c\x83\xb7\x64\xcf\xee\xbd\x32\xc6\x5a\xcd\x1a\xae\xaa\x42\x0a\xbc\xa7\xcd\x1f\x36\x61\xd2\xb6\x9d\xb3\x2c\xb5\xf5\xf4\x28\xec\x9f\x52\x17\x52\x54\xde\x6a\x0e\xc5\x2b\xf0\x83\xb3\xb3\xe9\x03\x8d\xa5\x33\x61\xde\x25\x71\x90\x58\x8a\x20\xaa\xb7\x14\x66\x8d\x43\x46\xd7\xbf\xa4\xa8\x74\x26\x34\x7b\xcc\x4a\x6f\xdc\x39\x78\x86\x37\xa0\x3e\x52\x3a\x30\xe8\x33\x58\xc0\xac\x61\xcf\xb2\x56\x39\xef\x29\x9d\x11\x17\x9b\x20\x88\xee\x0d\x9d\x07\xff\xb1\x7b\xfa\xa3\xb4\x9d\xed\x52\x76\x5d\xbd\x7f\x79\x59\x3e\xdb\x2a\x43\xa5\x55\x9d\xeb\xd6\xa2\xa9\x5c\x9f\xf0\xe9\x9b\x8c\x89\xe0\xd3\xde\xb9\xa6\x00\xdc\x9c\x3b\xc4\x1c\x04\x89\xba\xae\x94\x6b\x36\xa2\xf2\x36\x86\x90\xd7\x5a\xe4\xf0\xc4\x8f\x13\xd1\xc4\x9e\x65\x4c\x92\xc2\xd7\x24\x09\xdc\x4c\x65\xea\x73\xe4\xba\x56\x02\x7e\x9f\xb0\x6c\x1d\xf3\x9d\xcf\xb9\xa7\xbe\xeb\xfe\x98\x3e\x9d\xb8\x6a\xf2\x49\xd6\x04\xec\x33\xc6\xca\x0e\xca\x9a\x00\x57\x4a\x76\x71\xf5\x53\xba\xe7\x7a\x27\x37\x17\x73\xfa\x68\x8f\xaa\xe1\xa8\x60\x91\xce\xd6\xb4\x94\x95\xa6\x83\x59\x99\xc3\xac\x56\x85\xbd\x1e\x5f\x79\x42\x37\xe2\x96\xd0\xa1\x5d\xec\x05\x04\xbf\x60\x82\x9d\xd3\x70\x4b\x30\xa2\x84\x8e\xfc\x3e\x5d\x17\x8f\x12\x2e\xcc\x55\xe7\xf1\xfa\xb8\x48\xe9\x84\x6d\x58\x9e\xcf\x96\x69\xe8\x13\xae\xd6\x34\x7f\xad\x8a\x49\x72\xac\xfa\xaf\xb2\x9e\xd7\xf8\x2b\x8f\x6b\x67\x55\x93\x7b\xdd\x67\x2b\x59\x6b\x1e\x5f\xa0\x04\x0b\xe6\xa6\x2b\x46\xfd\x3e\x97\xcc\x18\x9a\xa4\x03\x5e\x9f\x3d\xa6\x46\xc7\x4d\x0e\x10\x97\x99\xd6\x5c\x89\x18\x15\x9c\xfd\xbb\x7a\xf8\x5b\xaa\x7d\xa6\x2d\x83\x97\x37\x63\x68\xda\x7f\x31\x2e\xbf\x38\xfe\xe2\x72\xa1\xfc\xa1\x9f\x4f\x7f\x96\x8c\x22\x9c\x03\x7f\xaf\xc6\xc5\xbe\x12\x1a\xa2\xd5\xaa\xb8\x96\xe6\xb5\xa2\x07\x08\xf7\x99\xd8\xbc\xa3\x54\x35\x39\x1b\x86\x14\x60\x25\x67\x7d\xf6\x58\xe8\x60\x15\x76\x01\xb9\x3e\x85\x62\x14\xb4\xaa\x57\x8b\xe4\xa7\x34\x46\xcb\x32\x4e\xbc\x92\x84\x68\xbb\x5a\x6f\xe4\x51\xc4\x1d\xb7\x45\xfd\x9e\xd4\x7c\x97\x7b\x58\x83\x6b\x52\x97\xc2\x51\xd9\x1a\xb2\x15\xaf\x4a\x29\x2a\xfe\x9f\x2a\x34\x4a\xab\xe2\x07\xa7\xf6\x6c\xc5\x0f\x35\xaf\x34\x66\x11\x15\x56\x8e\x04\x3f\xc6\x4e\xed\x3d\x81\x37\x79\xf9\x28\xb1\xd6\x24\xe2\x4a\xa1\x9d\x1d\xb3\xe5\x9f\xfe\x36\x56\xfc\x90\x42\x21\x12\x12\xe1\xc0\x2a\x05\xbf\x2d\x40\x14\xef\x88\x1b\xf5\xa6\x2e\x8a\xf8\xa8\x52\xbc\x4b\xd1\x2e\x21\x51\xe4\x1a\x42\x22\x43\x22\x59\x6b\x7b\x8c\x0c\x5d\x49\xb1\x02\xa3\x7c\x3d\xa6\x4f\xd5\xd1\x63\xa9\x7d\x10\xd7\x28\x3b\x6c\x6c\xc7\xf9\x13\x1e\x7c\xb7\x83\xc3\x1f\x01\x00\x00\xff\xff\x88\xae\x31\x71\xcb\x09\x00\x00")

func httpHttpServerGogoBytes() ([]byte, error) {
	return bindataRead(
		_httpHttpServerGogo,
		"http/http.server.gogo",
	)
}

func httpHttpServerGogo() (*asset, error) {
	bytes, err := httpHttpServerGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http/http.server.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceServiceGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\x41\x4e\xc3\x30\x10\x3c\x77\x5f\xb1\xb2\x7a\x48\xaa\x36\x0f\x40\xe2\x84\x38\x70\x00\x55\xc0\x07\x12\x67\x53\x02\xb5\xe3\xda\x9b\xaa\x95\xb5\x7f\x47\x76\x8c\x10\x95\xb8\x24\xda\x99\xd9\x99\x1d\xc7\xd8\xd3\x30\x5a\x42\x15\xc8\x9f\x47\x4d\x0a\x77\x22\x31\xee\x70\x3d\x75\x9f\x78\x77\x8f\x4d\x02\xc0\xb5\xfa\xab\x3d\x10\xc6\x98\xf0\x66\xbf\x8c\xcd\x4b\x6b\x48\x04\x60\x34\x6e\xf2\x8c\x15\x20\x22\x2a\x3d\x59\xa6\x0b\x2b\x58\xa9\xc1\xb0\xca\x60\xfe\xb8\x0e\x55\x71\x78\xca\x1b\xfb\x4e\x44\x41\x0d\x90\x12\x7d\x6b\x0f\x84\xeb\x72\x48\xca\xce\xca\xb7\x65\x0e\x22\xc0\x57\x97\x4f\x28\x92\x12\x5f\x04\x18\xd8\xcf\x9a\x23\x48\xb2\x2b\x66\x86\xf8\x63\xea\xb3\xd7\xcf\xd2\x73\x86\x42\xae\x35\xcc\x56\x63\x15\xce\x1a\x37\xff\xd9\xd6\x29\x70\xb1\x29\x44\xa5\xf9\x82\xa5\x63\xf3\xb0\xfc\xb7\xe8\xe9\x84\x1b\xd7\x35\xbf\xea\x57\x3a\xcd\x14\xf8\xfd\xea\x48\xa4\xc6\xea\x96\xe5\xd9\xdb\xb0\xb0\x5b\x24\xef\x27\x5f\x63\x84\x95\xcf\x04\xda\xf1\xb8\xc5\xc1\x70\xf3\x98\x98\xa1\x52\xb7\x67\xe0\x6c\x47\xe3\x8e\x64\xc8\x32\xf5\xaa\x06\x81\x18\xc9\xf6\xb9\x58\x7e\x50\xb2\xbd\xfc\x01\xbf\x03\x00\x00\xff\xff\xa2\x65\xd4\x99\xee\x01\x00\x00")

func serviceServiceGogoBytes() ([]byte, error) {
	return bindataRead(
		_serviceServiceGogo,
		"service/service.gogo",
	)
}

func serviceServiceGogo() (*asset, error) {
	bytes, err := serviceServiceGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/service.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"grpc/grpc.client.gogo": grpcGrpcClientGogo,
	"grpc/grpc.server.gogo": grpcGrpcServerGogo,
	"http/http.client.gogo": httpHttpClientGogo,
	"http/http.server.gogo": httpHttpServerGogo,
	"service/service.gogo": serviceServiceGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"grpc": &bintree{nil, map[string]*bintree{
		"grpc.client.gogo": &bintree{grpcGrpcClientGogo, map[string]*bintree{}},
		"grpc.server.gogo": &bintree{grpcGrpcServerGogo, map[string]*bintree{}},
	}},
	"http": &bintree{nil, map[string]*bintree{
		"http.client.gogo": &bintree{httpHttpClientGogo, map[string]*bintree{}},
		"http.server.gogo": &bintree{httpHttpServerGogo, map[string]*bintree{}},
	}},
	"service": &bintree{nil, map[string]*bintree{
		"service.gogo": &bintree{serviceServiceGogo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

