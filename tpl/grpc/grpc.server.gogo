{{define "grpc.server" -}}{{- $obj := . -}}
package {{$obj.Package.Name}}

import (
	"context"
	"crypto/tls"
	"fmt"
	"net"

	pb "{{$obj.ImportPb}}"
	"github.com/x-mod/glog"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
)

{{- range $service := $obj.Services}}
type {{$service.Name}}GrpcServer struct{
    addr string
	tls  *tls.Config
	gserver *grpc.Server
	service pb.{{$service.Name}}Server
}

type {{$service.Name}}GrpcServerOption func(*{{$service.Name}}GrpcServer)

func {{$service.Name}}Address(addr string) {{$service.Name}}GrpcServerOption {
	return func(svc *{{$service.Name}}GrpcServer) {
		svc.addr = addr
	}
}

func {{$service.Name}}TLSConfig(tls *tls.Config) {{$service.Name}}GrpcServerOption {
	return func(svc *{{$service.Name}}GrpcServer) {
		svc.tls = tls
	}
}

func {{$service.Name}}Service(service pb.{{$service.Name}}Server) {{$service.Name}}GrpcServerOption {
	return func(svc *{{$service.Name}}GrpcServer) {
		svc.service = service
	}
}

func New{{$service.Name}}GrpcServer(opts ...{{$service.Name}}GrpcServerOption) *{{$service.Name}}GrpcServer {
	server := &{{$service.Name}}GrpcServer{
		addr: ":8080",
	}
	for _, opt := range opts {
		opt(server)
	}
	gopts := []grpc.ServerOption{}
	if server.tls != nil {
		gopts = append(gopts, grpc.Creds(credentials.NewTLS(server.tls)))
	}
    server.gserver = grpc.NewServer(gopts...)	
    return server
}

func (srv *{{$service.Name}}GrpcServer) Serve(ctx context.Context) error {
    if srv.service ==  nil {
		return fmt.Errorf("{{$service.Name}} implemention required")
	}
	pb.Register{{$service.Name}}Server(srv.gserver, srv.service)
    ln, err := net.Listen("tcp", srv.addr)
	if err != nil {
		return err
	}

	glog.V(2).Infoln("grpc server ({{$service.Name}}) serving at ", srv.addr)
	return srv.gserver.Serve(ln)
}

func (srv *{{$service.Name}}GrpcServer) Close() {
	srv.gserver.Stop()
	glog.V(2).Infoln("grpc server ({{$service.Name}}) closed.")
}

{{- end}}
{{end -}}

