{{define "http.client" -}}{{- $obj := . -}}
package {{$obj.Package.Name}}

import (
	"context"
	"crypto/tls"
	"fmt"
	"strings"

	pb "{{$obj.ImportPb}}"
	"github.com/x-mod/httpclient"
	"github.com/x-mod/httpclient/grpc"
)

{{- range $service := $obj.Services}}
{{- $version := "v0" -}}
{{range $sopt := $service.Options -}}
{{- if eq $sopt.Name "(options.service)" -}}
    {{- range $k, $v := $sopt.Constant.Map}}
        {{- if eq $k "version"}}
        {{- $version = $v.Source -}}
        {{end -}}
    {{end -}}
{{- end -}}
{{- end}}

func {{$service.Name}}HTTPName() string {
    return strings.Join([]string{strings.ToLower("{{$obj.Package.Name}}"), strings.ToLower("{{$service.Name}}")}, "-")
}
func {{$service.Name}}HTTPPort() int {
    return 8080
}
func {{$service.Name}}HTTPAddr() string {
    return fmt.Sprintf("%s:%d", {{$service.Name}}HTTPName(), {{$service.Name}}HTTPPort())
}

type {{$service.Name}}HTTPClient struct {
	addr       string
	scheme     string
	tls 	   *tls.Config
	client     *httpclient.Client
}

type {{$service.Name}}HTTPClientOpt func(*{{$service.Name}}HTTPClient)

func TLSConfig(tls *tls.Config) {{$service.Name}}HTTPClientOpt {
	return func(c *{{$service.Name}}HTTPClient) {
		c.tls = tls
	}
}

func Scheme(scheme string) {{$service.Name}}HTTPClientOpt {
	return func(c *{{$service.Name}}HTTPClient) {
		c.scheme = scheme
	}
}

func Client(client *httpclient.Client) {{$service.Name}}HTTPClientOpt {
	return func(c *{{$service.Name}}HTTPClient) {
		c.client = client
	}
}

func New{{$service.Name}}HTTPClient(opts ...{{$service.Name}}HTTPClientOpt) *{{$service.Name}}HTTPClient {
	c := &{{$service.Name}}HTTPClient{
		scheme: "http", 
		addr: {{$service.Name}}HTTPAddr(),
	}
	for _, opt := range opts {
		opt(c)
	}
	if c.tls != nil {
		c.scheme = "https"
	}
	if c.client == nil {
		c.client = httpclient.New(httpclient.TLSConfig(c.tls))
	}
	return c
}

{{range $method := $service.Methods}}
    {{- $httpmethod := "post" -}}
    {{- $uri := "" -}}
    {{- range $option := $method.Options -}}
        {{- if eq $option.Name "(options.http)" -}}
            {{- range $k, $v := $option.Constant.Map -}}
                {{- if eq $k "method"}}
                {{- $httpmethod = $v.Source -}}
                {{- end -}}
                {{- if eq $k "uri"}}
                {{- $uri = $v.Source -}}
                {{- end -}}
            {{- end}}
        {{- end -}}
    {{- end -}}
func (c *{{$service.Name}}HTTPClient) {{$method.Name}}(ctx context.Context, in *pb.{{$method.RequestType}}) (*pb.{{$method.ReturnsType}}, error) {
	req, err := httpclient.MakeRequest(
		httpclient.Method("{{$httpmethod}}"),
		httpclient.URL(
			httpclient.Scheme(c.scheme),
			httpclient.Host(c.addr),
            {{if eq $uri "" -}}
            httpclient.URI(grpc.URIFormat("{{$version}}", "{{$obj.Package.Name}}", "{{$service.Name}}", "{{$method.Name}}")),
            {{- else -}}
            httpclient.URI("{{$uri}}"),
            {{- end}}
		),
		httpclient.Content(
			httpclient.PBJSON(in),
		),
	)
	if err != nil {
		return nil, err
	}
	out := &pb.{{$method.ReturnsType}}{}
	if err := c.client.Execute(ctx, req, grpc.PBJSONResponse(out)); err != nil {
		return nil, err
	}
	return out, nil
}
{{end -}}

{{- end}}
{{end -}}


