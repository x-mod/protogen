{{define "http.server" -}}{{- $obj := . -}}
package {{$obj.Package.Name}}

import (
    "context"
    "crypto/tls"
	"net/http"	

	pb "{{$obj.ImportPb}}"
	"github.com/x-mod/httpserver"
	"github.com/x-mod/httpserver/grpc"
)

{{- range $service := $obj.Services}}
{{- $version := "v0" -}}
{{range $sopt := $service.Options -}}
{{- if eq $sopt.Name "(options.service)" -}}
    {{- range $k, $v := $sopt.Constant.Map}}
        {{- if eq $k "version"}}
        {{- $version = $v.Source -}}
        {{end -}}
    {{end -}}
{{- end -}}
{{- end}}

type {{$service.Name}}HTTPServer struct{
    addr    string
    tls     *tls.Config
    hserver  *httpserver.Server
	service pb.{{$service.Name}}Server
}

type {{$service.Name}}HTTPServerOption func(*{{$service.Name}}HTTPServer)

func Address(addr string) {{$service.Name}}HTTPServerOption {
    return func(srv *{{$service.Name}}HTTPServer) {
        srv.addr = addr
    }
}

func TLSConfig(tls *tls.Config) {{$service.Name}}HTTPServerOption {
    return func(srv *{{$service.Name}}HTTPServer) {
        srv.tls = tls
    }
}

func Service(service pb.{{$service.Name}}Server) {{$service.Name}}HTTPServerOption {
	return func(srv *{{$service.Name}}HTTPServer) {
		srv.service = service
	}
}

func New{{$service.Name}}HTTPServer(opts ...{{$service.Name}}HTTPServerOption) *{{$service.Name}}HTTPServer {
    server := &{{$service.Name}}HTTPServer{
		addr: ":8080",
	}
	for _, opt := range opts {
		opt(server)
	}
	hopts := []httpserver.ServerOpt{
        httpserver.Name("http server ({{$service.Name}})"),
        httpserver.Address(server.addr),
    }
    if server.tls != nil {
        hopts = append(hopts, httpserver.TLSConfig(server.tls))
    }
    server.hserver = httpserver.New(hopts...)	
    return server
}

func (srv *{{$service.Name}}HTTPServer) Serve(ctx context.Context) error {
    {{range $method := $service.Methods}}
        {{- $httpmethod := "post" -}}
        {{- $uri := "" -}}
        {{- range $option := $method.Options -}}
            {{- if eq $option.Name "(options.http)" -}}
                {{- range $k, $v := $option.Constant.Map -}}
                    {{- if eq $k "method"}}
                    {{- $httpmethod = $v.Source -}}
                    {{- end -}}
                    {{- if eq $k "uri"}}
                    {{- $uri = $v.Source -}}
                    {{- end -}}
                {{- end}}
            {{- end -}}
        {{- end -}}
        srv.hserver.Route(
            httpserver.Method("{{$httpmethod}}"),
            {{if eq $uri "" -}}
            httpserver.Pattern(grpc.URIFormat("{{$version}}", "{{$obj.Package.Name}}", "{{$service.Name}}", "{{$method.Name}}")),
            {{- else -}}
            httpserver.Pattern("{{$uri}}"),
            {{- end}}
            httpserver.Handler(http.HandlerFunc(srv.{{$method.Name}})),
        )
    {{end}}
    return srv.hserver.Serve(ctx)
}

func (srv *{{$service.Name}}HTTPServer) Stop() {
    srv.hserver.Close()
}

{{range $method := $service.Methods}}
func (srv *{{$service.Name}}HTTPServer) {{$method.Name}}(wr http.ResponseWriter, req *http.Request) {
	in := new(pb.{{$method.RequestType}})
	err := grpc.PBRequest(req, in)
	if err != nil {
		grpc.PBResponse(wr, nil, err)
		return
	}
	out, err := srv.service.{{$method.Name}}(req.Context(), in)
	grpc.PBResponse(wr, out, err)
}
{{end -}}

{{- end}}
{{end -}}

